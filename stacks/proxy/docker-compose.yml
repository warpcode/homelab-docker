services:
  cert-generator:
    image: alpine:latest
    volumes:
      - certs:/certs
    command: |
      sh -c "
      if [ ! -f /certs/tls.crt ]; then
        apk add --no-cache openssl;
        openssl req -x509 -newkey rsa:4096 -keyout /certs/tls.key -out /certs/tls.crt -days 3650 -nodes -subj '/C=US/ST=State/L=City/O=Org/CN=*.localhost';
        chmod 600 /certs/tls.key;
        chmod 644 /certs/tls.crt;
        echo 'Certificates generated';
      else
        echo 'Certificates already exist';
      fi

      echo 'Creating dynamic configuration...'
      cat > /certs/dynamic.yml << EOF
      tls:
        certificates:
          - certFile: /certs/tls.crt
            keyFile: /certs/tls.key
            stores:
              - default
        stores:
          default:
            defaultCertificate:
              certFile: /certs/tls.crt
              keyFile: /certs/tls.key
      EOF
      echo 'Dynamic configuration created'
      "
  reverse-proxy:
    image: traefik:v3.5
    depends_on:
      - cert-generator
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --log.level=ERROR
      - --providers.docker.exposedbydefault=false
      - --providers.docker=true
      - --providers.file.directory=/certs
      - --providers.file.watch=true
      # - --certificatesresolvers.leresolver.acme.httpchallenge=true
      # - --certificatesresolvers.leresolver.acme.email=your-email #Set your email address here, is for the generation of SSL certificates with Let's Encrypt.
      # - --certificatesresolvers.leresolver.acme.storage=./acme.json
      # - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/certs:ro
      # - "./acme.json:/acme.json"
    networks:
      - proxy
    labels:
      # Catch all to redirect 80 to 443
      # - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      # - "traefik.http.routers.http-catchall.entrypoints=web"
      # - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      - "traefik.enable=true"
      - "traefik.providers.docker.network=proxy_proxy"
      # http
      - "traefik.http.routers.proxy.entrypoints=web"
      - "traefik.http.routers.proxy.rule=Host(`proxy.${BASE_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.proxy.middlewares=proxy-https-redirect"
      - "traefik.http.middlewares.proxy-https-redirect.redirectscheme.scheme=https"
      # https
      - "traefik.http.routers.proxy-secure.entrypoints=websecure"
      - "traefik.http.routers.proxy-secure.rule=Host(`proxy.${BASE_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.proxy-secure.tls.certresolver=leresolver"
      - "traefik.http.routers.proxy-secure.service=proxy-secure"
      - "traefik.http.services.proxy-secure.loadbalancer.server.port=8080"

volumes:
  certs:

networks:
  proxy:
